

sudo /etc/init.d/nginx restart

Вопросы:
- "2. Плитка “Облачное хранилище”"
    Для каких целей нужна авторизация, и какой функционал будет для тех кто авторизовался?
    Нужен ли им личный кабинет?

1 "1. Вход(Панель администратора)"
    Вход в админ панель осуществляется также из "synology" или будет использоваться локальная бд?

Это основные моменты. В остальном все понятно. Мелочи уточню в ходе работы.

Срок две недели, с согласованием элементов в процессе. Стоимость 25т.р.
Оплата по результатам проделанных работ.

В результате размещение на моем хостинге с передачей вам прав, или размещение на вашем хостинге.
Тех обслуживание(устранение возможных багов) в течение недели просле приемки. Дальшейшее обслуживание за отдельную плату.





uwsgi --http :8000 --module libattery.wsgi

/home/newuser/libattery


sudo groupadd mygroup
sudo gpasswd -a newuser mygroup
sudo chown -R root:mygroup /
sudo find /home/newuser/ -uid 1000 -exec chown newuser {} \;

sudo chown -R mygroup:newuser ~/.cache/

chown -R myuser:postgres /var/lib/pgsql/11/data/

chown -R myuser:users /home/myuser/

sshfs root@194.58.108.126:/ /home/truba/sshfs/server_3/
mNFo!!gRu26DdU
sshfs root@5.63.159.110:/ /home/truba/sshfs/server_2/
ssh root@5.63.159.110
d5w7dV1slV7!P!

ssh root@5.63.159.110
FpRKQC!9NGBqyM



stdout_logfile=/home/myuser/lending_mag1/logs/uwsgi.log
stderr_logfile=/home/myuser/lending_mag1/logs/uwsgi_err.log



sudo ln -s /home/myuser/lending_mag1/deployment/my_site_nginx.conf /etc/nginx/sites-enabled
sudo ln -s /home/myuser/lending_mag1/deployment/my_site_nginx.conf /etc/nginx/sites-enabled/
sudo ln -s ~/path/to/your/mysite/mysite_nginx.conf /etc/nginx/sites-enabled/

sudo ln -s /home/myuser/lending_mag1/deployment/mysite_uwsgi.ini /etc/uwsgi/vassals/


uwsgi --http :8000 --module lending_mag_1.wsgi


uwsgi --socket mysite.sock --module lending_mag_1.wsgi --chmod-socket=664
uwsgi --socket mysite.sock --module /home/myuser/lending_mag1/lending_mag_1/wsgi.py --chmod-socket=664


sudo apt-get install postgresql-11
sudo apt-get install postgresql-client-11
sudo apt-get install libpq-dev


https://www.8host.com/blog/dobavlenie-i-udalenie-polzovatelej-v-ubuntu-16-04/
sudo usermod -aG sudo newuser
sudo apt-get install python3 python3-pip virtualenvwrapper

a11223344
sudo adduser myuser www-data
sudo chmod 775 -R /home/newuser/libattery
myuser  ALL=(ALL:ALL) ALL

sudo chown -R myuser:users /

/home/newuser/libattery

sudo useradd -G adm,cdrom,wheel -p password -s /bin/bash my_user
sudo rm -rf /etc/apache2 /usr/sbin/apache2 /usr/lib/apache2 /usr/share/apache2 /usr/share/man/man8/apache2.8.gz
sudo rm -rf /etc/apache2
apache2: /usr/sbin/apache2 /usr/lib/apache2 /etc/apache2 /usr/share/apache2 /usr/share/man/man8/apache2.8.gz


sudo nano /etc/apt/sources.list.d/pgdg.list
deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main









# mysite_nginx.conf

upstream django {
    # server unix:///home/newuser/libattery/mysite.sock; # взаимодействие с uwsgi через Unix-сокет (мы воспользуемся этим вариантом позже)
    server 127.0.0.1:8001; # взаимодействие с uwsgi через веб-порт
}

# конфигурация веб-сервера
server {
    # порт, который будет слушать веб-сервер в ожидании запросов от пользователй
    listen      8000;
    # доменное имя
    server_name     5.63.159.110; # замените на собственный домен или IP адрес
    charset     utf-8;

    # максимальный размер загружаемых на сервер данных
    client_max_body_size 75M;

    # обслуживание медиа файлов и статики
    location /media  {
        alias /home/newuser/libattery/media;  # расположение медиафайлов (при необходимости измените)
    }

    location /static {
        alias /home/newuser/libattery/static;  # расположение статики (при необходимости измените)

    }

    # Остальные запросы перенаправляются в Django приложение
    location / {
        uwsgi_pass  django;
        include     /home/newuser/libattery/uwsgi_params; # файл uwsgi_params, который мы только что взяли с github
    }
}

sudo ln -s /home/newuser/libattery/mysite_nginx.conf /etc/nginx/sites-enabled/











#mysite_uwsgi.ini
[uwsgi]

# Настройки, связанные с Django
# Корневая папка проекта (полный путь)
chdir           = /home/newuser/libattery
# Django wsgi файл
module          = libattery.wsgi
# полный путь к виртуальному окружению
home            = /home/newuser/venv

# общие настройки
# master
master          = true
# максимальное количество процессов
processes       = 10
# полный путь к файлу сокета
socket          = /home/newuser/libattery/mysite.sock
# права доступа к файлу сокета
chmod-socket    = 666
# очищать окружение от служебных файлов uwsgi по завершению
vacuum          = true



finmagaxic
qwecd32KLJdsf3





1. Обновить все
2.



















134.0.115.198
apipT!_TStI4w3




sshfs root@134.0.115.198:/ /home/truba/sshfs/server_3/
cd .

ssh root@134.0.115.198
sshpass -p 'apipT!_TStI4w3' ssh root@134.0.115.198

git clone https://github.com/mironartt/inte_pro

потом ставиь базу с юзером (в реадми этот кусок)
поднимаешь виртуалку
устанвливаешь модули:
pip install -r requirements.txt

вставляешь рядом с settings.py прикрепленный файл
делаешь миграции
добавляешь суперюзера


для внесения изменений на сервере:
ssh root@188.93.210.80       (если попросит, введи yes)
пароль XiBNUS!CnpSp_4

как подключишься введи:

sudo service supervisor stop
cd /home/myuser/www/inte_pro/
git pull
sudo touch /home/myuser/www/inte_pro/deployment/mysite_uwsgi.ini
sudo service supervisor start
